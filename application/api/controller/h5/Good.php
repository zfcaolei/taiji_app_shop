<?php
/**
 * Created by PhpStorm.
 * User: baidu
 * Date: 17/8/5
 * Time: 下午4:37
 */
namespace app\api\controller\H5;


/*
 * H5页面营销支付
 */

use app\admin\controller\store\StoreProduct;
use app\admin\model\store\StoreProduct as ProductModel;
use app\admin\model\user\test;
use app\common\lib\Fun;
use app\common\libs\WxPayConfig;
use app\routine\model\store\StoreBargainUser;
use app\routine\model\store\StoreCart;
use app\routine\model\store\StoreCouponUser;
use app\routine\model\store\StoreOrder;
use app\routine\model\store\StorePink;
use app\routine\model\store\StoreProductAttr;
use app\routine\model\user\User;
use service\JsonService;
use service\SystemConfigService;
use service\UtilService;
use think\Controller;
use think\Request;

class Good extends Controller {


    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        header('Access-Control-Allow-Origin: *');
        header("Access-Control-Allow-Headers: token, Origin, X-Requested-With, Content-Type, Accept, Authorization");
        header('Access-Control-Allow-Methods: POST,GET,PUT,DELETE');
    }

    public function details(Request $request)
    {
        $id = $request->get('id',0);

        if (empty($id) || $id  == 0){
            $id = 8;
          //  return show(config('code.error'), '参数错误', [], 400);
        }


        $ProductData = ProductModel::where(['id'=>$id,'is_del'=>0])->find();

        if (empty($ProductData)){
            return show(config('code.error'), '商品不存在', [], 400);
        }

        $data = ProductModel::where(['id'=>$id])->field(['id', 'store_name', 'store_info', 'description'])->find();
        return show(1, 'success', $data, 200);

    }


    /**
     * 获取商品属性数据
     * @param string $productId
     * @return \think\response\Json
     */
    public function ProductAttrDetail($productId = '')
    {
        if(!$productId || !is_numeric($productId)) return show(config('code.error'), '参数错误', [], 400);
        list($productAttr,$productValue) = StoreProductAttr::getProductAttrDetail($productId);
        $data = \app\admin\model\store\StoreProduct::get($productId);
        if (!empty($data)) {
            $pirce = $data['price'];
            $image = $data['image'];
            $ot_pirce = $data['ot_price'];
        }
        return show(1, 'success',compact('productAttr','productValue','pirce','image','ot_pirce'), 200);

    }



    public function pay(Request $request)
    {
        if (!$request->isGet()){
            return show(config('code.error'), '请求方式错误', [], 400);
        }


        $name = $request->param('name');//收货人姓名
        $phone =  $request->param('phone');//手机号码
        $address =  $request->param('address');//地址
        if (empty($name) && empty($phone) && empty($address)){
            return show(config('code.error'), '参数错误,收货人姓名/手机号码/地址错误', [], 400);
        }
        $orderdata = [
            'name' => $name,
            'phone'=>$phone,
            'address'=>$address,
        ];

        $UserModel = new \app\admin\model\user\User();
        $UserModel -> nickname = 'H5'.$orderdata['name'];
        $UserModel -> account = $orderdata['phone'];
        $UserModel -> pwd = $orderdata['phone'];
        $UserModel -> avatar = '';
        $UserModel -> add_ip = '192.168.1.1';
        $UserModel -> last_time = time();
        $UserModel -> last_ip = '192.168.1.1';
        $UserModel -> user_type = 'H5';
        $UserModel -> phone = $orderdata['phone'];
        $UserModel -> add_time = time();
        if (!$UserModel -> save()){
            return show(config('code.error'), '参数错误,创建用户失败', [], 400);
        }


        $productId = $request->param('productId');
        $cartNum = $request->param('cartNum',1);
        $uniqueId = $request->param('uniqueId');

        if (!$productId || !is_numeric($productId)) return show(config('code.error'), '参数错误,商品id为空', [], 404);
         $user_id = $UserModel->uid;
         if (empty($user_id)){
             return show(config('code.error'), '参数错误', [], 400);
         }
        $res = StoreCart::setCart($user_id, $productId, $cartNum, $uniqueId, 'product');
       //var_dump($res);die;



        if (!empty($res->id)) {

            $cartId = $res->id;


            if (!is_string($cartId) || !$cartId) return show(config('code.error'), '请提交购买的商品1', [], 400);
            $cartGroup = StoreCart::getUserProductCartList($user_id, $cartId, 1);

            if (count($cartGroup['invalid'])) return show(config('code.error'), '已失效', $cartGroup['invalid'][0]['productInfo']['store_name'], 400);//return JsonService::fail($cartGroup['invalid'][0]['productInfo']['store_name'] . '已失效!');
            if (!$cartGroup['valid']) return show(config('code.error'), '请提交购买的商品2', [], 400);
            $cartInfo = $cartGroup['valid'];

            $priceGroup = StoreOrder::getOrderPriceGroup($cartInfo);
            $other = [
                'offlinePostage' => SystemConfigService::get('offline_postage'),
                'integralRatio' => SystemConfigService::get('integral_ratio')
            ];
            $usableCoupon = StoreCouponUser::beUsableCoupon($user_id, $priceGroup['totalPrice']);
            $cartIdA = explode(',', $cartId);
            if (count($cartIdA) > 1) $seckill_id = 0;
            else {
                $seckillinfo = StoreCart::where('id', $cartId)->find();
                if ((int)$seckillinfo['seckill_id'] > 0) $seckill_id = $seckillinfo['seckill_id'];
                else $seckill_id = 0;
            }
            $delCar = StoreCart::del($cartId);
            if (empty($delCar)) {
                //return JsonService::fail($cartGroup['invalid'][0]['productInfo']['store_name'] . '已失效!');
                return show(config('code.error'), 'false', [], 400);
            }

        }
        $data['orderKey'] = StoreOrder::cacheOrderInfo($user_id, $cartInfo, $priceGroup, $other);



        if(!$data['orderKey']) return JsonService::fail('参数错误!');
        if(StoreOrder::be(['order_id|unique'=>$data['orderKey'],'uid'=>$user_id,'is_del'=>0]))
            return show(1, '订单已生成',['orderId'=>$data['orderKey'],'key'=>$data['orderKey']], 200);

        list($addressId,$couponId,$payType,$useIntegral,$mark,$combinationId,$pinkId,$seckill_id,$formId,$bargainId) = UtilService::postMore([
            'addressId','couponId','payType','useIntegral','mark',['combinationId',0],['pinkId',0],['seckill_id',0],['formId',''],['bargainId','']
        ],Request::instance(),true);
        $payType = strtolower($payType);
     //   if($bargainId) StoreBargainUser::setBargainUserStatus($bargainId,$user_id);//修改砍价状态


        $order = StoreOrder::H5cacheKeyCreateOrder($user_id,$data['orderKey'],$orderdata,$payType,$useIntegral,$couponId,$mark,$combinationId,$pinkId,$seckill_id,$bargainId);

        $orderId = $order['order_id'];
        $info = compact('orderId','key');

        if (!empty($orderId)){
            $ProductData = \app\wap\model\store\StoreProduct::get($productId);
            $data['order_id'] = $orderId;
            $data['ProductName'] = $ProductData['store_name'];
            $data['price'] = $order['pay_price'];
//            $url = 'http://app.taijidjk69.com/api/h5/good/getcode?order_id='.$orderId.'&price='.$price.'&body='.$ProductName;
//            $dataxml = Fun::httpRequest($url, 'GET', []);
            return show(1, '订单已生成',$data, 200);
        }else{
            return show(config('code.error'), '订单创建失败', [], 400);
        }



//        if($orderId){
//            if($payType == 'weixin'){
//                $orderInfo = StoreOrder::where('order_id',$orderId)->find();
//                if(!$orderInfo || !isset($orderInfo['paid'])) exception('支付订单不存在!');
//                if($orderInfo['paid']) exception('支付已支付!');
//                //如果支付金额为0
//                if(bcsub((float)$orderInfo['pay_price'],0,2) <= 0){
//                    //创建订单jspay支付
//                    if(StoreOrder::jsPayPrice($orderId,$user_id,$formId))
//                        return show(1, '微信支付成功',$info, 200);
//                    else
//                        return show(0, StoreOrder::getErrorInfo(),$info, 400);
//                }else{
//                    try{
//                        $jsConfig = StoreOrder::jsPay($orderId);//创建订单jspay
//                    }catch (\Exception $e){
//                        //  return JsonService::status('pay_error',$e->getMessage(),$info);
//                        return show(0,$e->getMessage(),$info, 400);
//                    }
//                    $info['jsConfig'] = $jsConfig;
//                    return show(0,'订单创建成功',$info, 200);
//                    // return JsonService::status('wechat_pay','订单创建成功',$info);
//                }
//            }else if($payType == 'yue'){
//                if(StoreOrder::yuePay($orderId,$user_id,$formId))
//                    //return JsonService::status('success','余额支付成功',$info);
//                    return show(1,'余额支付成功',$info, 200);
//                else
//                    // return JsonService::status('pay_error',StoreOrder::getErrorInfo());
//                    return show(0,StoreOrder::getErrorInfo(),[], 400);
//            }else if($payType == 'offline'){
////                RoutineTemplate::sendOrderSuccess($formId,$orderId);//发送模板消息
//                //return JsonService::status('success','订单创建成功',$info);
//                return show(1,'订单创建成功',$info, 200);
//            }
//        }else{
//            // return JsonService::fail(StoreOrder::getErrorInfo('订单生成失败!'));
//            return show(1,'订单生成失败11',[], 400);
//        }

           // return show(1, 'success', $data, 200);

    }

    public function WxPayUrl(Request $request)
    {
        $order_id = $request->get('order_id');
        $ProductName = $request->get('ProductName');
        $price = $request->get('price');

        $url = "https://api.mch.weixin.qq.com/pay/unifiedorder";//微信传参地址
        //1.获取调用统一下单接口所需必备参数
        $appid = 'wx68134d9aa6cd89e3';//WxPayConfig::$appid;//微信公众号appid
        $mch_id = '1514392261';//WxPayConfig::$mchid;//微信支付商户号
        $key = '94a0ff53ca60ab0cb9fa72379431f4f6';//WxPayConfig::$key;//自己设置的微信商家key
        $out_trade_no = $order_id;//平台内部订单号
        $nonce_str = MD5($out_trade_no);//随机字符串
        $body = $ProductName;//$bodys;//付款内容
        $total_fee = $price*100;//100 * 100;//付款金额，单位为分
        $spbill_create_ip = Fun::getIP(); //获得用户设备IP
        $attach = 'weixinh5';//附加数据（自定义，在支付通知中原样返回）
        $notify_url = 'http://app.taijidjk69.com/api/h5/good/weixinnotify';//WxPayConfig::$notify_url; //异步回调地址，需外网可以直接访问
        $trade_type = 'MWEB';//交易类型，微信H5支付时固定为MWEB
        $scene_info = '{"h5_info":{"type":"Wap","wap_url":" http://app.taijidjk69.com/","wap_name":"支付"}}';//WxPayConfig::$scene_info;//场景信息
        //2.将参数按照key=value的格式，并按照参数名ASCII字典序排序生成字符串
        $signA = "appid=$appid&attach=$attach&body=$body&mch_id=$mch_id&nonce_str=$nonce_str&notify_url=$notify_url&out_trade_no=$out_trade_no&scene_info=$scene_info&spbill_create_ip=$spbill_create_ip&total_fee=$total_fee&trade_type=$trade_type";
        //3.拼接字符串
        $strSignTmp = $signA . "&key=$key";
        //4.MD5加密后转换成大写
        $sign = strtoupper(MD5($strSignTmp));
        //5.拼接成所需XML格式
        $post_data = "<xml>
                       <appid>$appid</appid>
                       <attach>$attach</attach>
                       <body>$body</body>
                       <mch_id>$mch_id</mch_id>
                       <nonce_str>$nonce_str</nonce_str>
                       <notify_url>$notify_url</notify_url>
                       <out_trade_no>$out_trade_no</out_trade_no>
                       <spbill_create_ip>$spbill_create_ip</spbill_create_ip>
                       <total_fee>$total_fee</total_fee>
                       <trade_type>$trade_type</trade_type>
                       <scene_info>$scene_info</scene_info>
                       <sign>$sign</sign>
                   </xml>";
        //6.以POST方式向微信传参，并取得微信返回的支付参数
        $dataxml = Fun::httpRequest($url, 'POST', $post_data);
        $objectxml = (array)simplexml_load_string($dataxml, 'SimpleXMLElement', LIBXML_NOCDATA); //将微信返回的XML转换成数组
        return $objectxml;

    }




    public function weixinNotify()
    {

        //获取接口数据，如果$_REQUEST拿不到数据，则使用file_get_contents函数获取
        $post = $_REQUEST;


//        if ($post == null) {
//            $post = file_get_contents("php://input");
//        }
//
//        if ($post == null) {
//            $post = isset($GLOBALS['HTTP_RAW_POST_DATA']) ? $GLOBALS['HTTP_RAW_POST_DATA'] : '';
//        }

        $testxml  = file_get_contents("php://input");

        $jsonxml = json_encode(simplexml_load_string($testxml, 'SimpleXMLElement', LIBXML_NOCDATA));

        $result = json_decode($jsonxml, true);//转成数组，

        $order_id = $result['out_trade_no'];
        $testModel = new \app\admin\model\test();
        $testModel -> text = $order_id;
        $testModel ->save();


        $model = \app\admin\model\order\StoreOrder::where(['order_id'=>$order_id])->find();
        $model -> paid = 1;
        if (!$model -> save()){
            exit('Notify 非法回调');
        }else{
            $str = '<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>';
            echo $str;
        }







//
//        if (empty($post) || $post == null || $post == '') {
//            //阻止微信接口反复回调接口  文档地址 https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=9_7&index=7，下面这句非常重要!!!
//            $str = '<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>';
//            echo $str;
//            exit('Notify 非法回调');
//        }
//
//        /*****************微信回调返回数据样例*******************
//         * $post = '<xml>
//         * <return_code><![CDATA[SUCCESS]]></return_code>
//         * <return_msg><![CDATA[OK]]></return_msg>
//         * <appid><![CDATA[wx2421b1c4370ec43b]]></appid>
//         * <mch_id><![CDATA[10000100]]></mch_id>
//         * <nonce_str><![CDATA[IITRi8Iabbblz1Jc]]></nonce_str>
//         * <sign><![CDATA[7921E432F65EB8ED0CE9755F0E86D72F]]></sign>
//         * <result_code><![CDATA[SUCCESS]]></result_code>
//         * <prepay_id><![CDATA[wx201411101639507cbf6ffd8b0779950874]]></prepay_id>
//         * <trade_type><![CDATA[APP]]></trade_type>
//         * </xml>';
//         *************************微信回调返回*****************/
//
//        libxml_disable_entity_loader(true); //禁止引用外部xml实体
//
//        $xml = simplexml_load_string($post, 'SimpleXMLElement', LIBXML_NOCDATA);//XML转数组
//
//        $post_data = (array)$xml;
//
//        /** 解析出来的数组
//         *Array
//         * (
//         * [appid] => wx1c870c0145984d30
//         * [bank_type] => CFT
//         * [cash_fee] => 100
//         * [fee_type] => CNY
//         * [is_subscribe] => N
//         * [mch_id] => 1297210301
//         * [nonce_str] => gkq1x5fxejqo5lz5eua50gg4c4la18vy
//         * [openid] => olSGW5BBvfep9UhlU40VFIQlcvZ0
//         * [out_trade_no] => fangchan_588796
//         * [result_code] => SUCCESS
//         * [return_code] => SUCCESS
//         * [sign] => F6890323B0A6A3765510D152D9420EAC
//         * [time_end] => 20180626170839
//         * [total_fee] => 100
//         * [trade_type] => JSAPI
//         * [transaction_id] => 4200000134201806265483331660
//         * )
//         **/
//        //订单号
//        $out_trade_no = isset($post_data['out_trade_no']) && !empty($post_data['out_trade_no']) ? $post_data['out_trade_no'] : 0;
//
//        //查询订单信息
//       // $order_info = DB::fetch_first("SELECT * FROM order WHERE order_no = '" . $out_trade_no . "'");
//        $order_model =  new \app\admin\model\order\StoreOrder;
//        $order_info = $order_model->where(['order_id'=>$out_trade_no])->find();
//
//        if (!empty($order_info)) {
//
//
//            $model = \app\admin\model\order\StoreOrder::where(['order_id'=>$out_trade_no])->find();
//            $model -> paid = 1;
//            $model ->pay_time = time();
//            $model -> save();
//            //查询平台信息
////            $platform_info = DB::fetch_first("SELECT * FROM pingtaiInfo WHERE `open_pid`= {$order_info['part1']}");
////
////            //平台支付key
////            $wxpay_key = $platform_info['zhifu_key'];
////
////            //接收到的签名
////            $post_sign = $post_data['sign'];
////            unset($post_data['sign']);
////
////            //重新生成签名
////            $newSign = MakeSign($post_data, $wxpay_key);
////
////            //签名统一，则更新数据库
////            if ($post_sign == $newSign) {
////
////                $updateData = array();
////                $updateData['pay_time'] = TIMESTAMP; //支付时间
////                $updateData['order_status'] = 2; //订单状态
////
////                //更新order数据库
////                //Do what you want...
////            }
//        }
//
//        //阻止微信接口反复回调接口  文档地址 https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=9_7&index=7，下面这句非常重要!!!
//        $str = '<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>';
//        echo $str;


    }



    public function test(Request $request)
    {
        $order_id = $request->get('order_id');
        $order_model = new \app\admin\model\order\StoreOrder();
        $model = \app\admin\model\order\StoreOrder::where(['order_id'=>$order_id])->find();
        return $model;
    }



}

